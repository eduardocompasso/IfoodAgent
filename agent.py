import asyncio
import json
from datetime import date, timedelta, datetime
from collections import Counter
from plugins.metrics_plugin import MetricsPlugin
from plugins.report_plugin import ReportPlugin

try:
    with open('data/pedidos.json', 'r', encoding='utf-8') as f:
        PEDIDOS_JSON_STR = f.read()
except FileNotFoundError:
    print("Erro: Arquivo 'data/pedidos.json' nÃ£o encontrado. O agente nÃ£o pode continuar.")
    PEDIDOS_JSON_STR = "{}"

async def run_agent():
    print("--- Executando agente em modo Ãºnico ---")
    metrics_plugin = MetricsPlugin()
    
    metrics = metrics_plugin.query_metrics(PEDIDOS_JSON_STR)
    clients_metrics = metrics_plugin.query_clients_metrics(PEDIDOS_JSON_STR)

    print("\n--- MÃ©tricas Gerais ---")
    print(json.dumps(metrics, indent=2, ensure_ascii=False))
    
    print("\n--- MÃ©tricas de Clientes ---")
    print(json.dumps(clients_metrics, indent=2, ensure_ascii=False))


async def chat_loop():
    print("\nDigite mensagens para o agente. Comandos disponÃ­veis: /metrics, /clients_metrics, /anomalies, /exit")
    context = {}
    metrics_plugin = MetricsPlugin()
    report_plugin = ReportPlugin()

    while True:
        try:
            user_input = await asyncio.to_thread(input, "\nVocÃª: ")
        except (EOFError, KeyboardInterrupt):
            print("\nSaindo...")
            break

        if not user_input:
            continue
        if user_input.strip().lower() in {"/exit", ":q", "sair"}:
            print("Tchau!")
            break

        if user_input.strip().lower() == "/metrics":
            metrics = metrics_plugin.query_metrics(PEDIDOS_JSON_STR)
            context["metrics"] = metrics

            print("\n\n--- MÃ©tricas Gerais ---")
            print(f"Restaurante: {metrics.get('restaurant_name')}")

            grand_total = metrics.get('grand_total_sold', 0.0)
            print(f"Valor Total Vendido: R$ {grand_total:.2f}")

            print("\nAnÃ¡lise de Tempo de Preparo:")
            
            avg_today_seconds = metrics.get('avg_prep_today_seconds', 0)
            if avg_today_seconds > 0:
                avg_today_minutes = avg_today_seconds / 60
                print(f"  MÃ©dia (Hoje): {avg_today_minutes:.2f} minutos ({avg_today_seconds}s)")
            else:
                print("  MÃ©dia (Hoje): Nenhum pedido concluÃ­do hoje.")

            avg_30d_seconds = metrics.get('avg_prep_last_30d_seconds', 0)
            if avg_30d_seconds > 0:
                avg_30d_minutes = avg_30d_seconds / 60
                print(f"  MÃ©dia (Ãšltimos 30 dias): {avg_30d_minutes:.2f} minutos ({avg_30d_seconds}s)")

            avg_overall_seconds = metrics.get('avg_prep_overall_seconds', 0)
            if avg_overall_seconds > 0:
                avg_overall_minutes = avg_overall_seconds / 60
                print(f"  MÃ©dia (Geral): {avg_overall_minutes:.2f} minutos ({avg_overall_seconds}s)")
            
            avg_by_day = metrics.get('avg_prep_time_by_day_seconds', {})
            if avg_by_day:
                print("\n  AnÃ¡lise de Tempo por Dia da Semana (MÃ©dia Geral):")
                for day, seconds in avg_by_day.items():
                    if seconds > 0:
                        minutes = seconds / 60
                        print(f"    - {day}: {minutes:.2f} min ({seconds}s)")

            sales_by_month = metrics.get('sales_by_month', {})
            print("\nAnÃ¡lise Mensal de Vendas:")
            for month, month_data in sales_by_month.items():
                month_total = month_data.get('total_value_sold', 0.0)
                print(f"\n  --- MÃªs: {month} ---")
                print(f"    Valor Vendido no MÃªs: R$ {month_total:.2f}")
                days_data = month_data.get('sales_by_day', {})
                if days_data:
                    print("    Pedidos por Dia da Semana:")
                    for day, count in sorted(days_data.items()):
                        print(f"      - {day}: {count} pedido(s)")
            
            top_products = metrics.get('top_products', [])
            print("\nTop 3 Produtos Mais Vendidos:")
            for i, product in enumerate(top_products, 1):
                print(f"  {i}. {product.get('name')} - {product.get('sold')} unidades")
            
            print("\n-------------------------------------\n")
            continue

        if user_input.strip().lower() == "/clients_metrics":
            metrics = metrics_plugin.query_clients_metrics(PEDIDOS_JSON_STR)
            context["clients_metrics"] = metrics
            
            print("\n--- MÃ©tricas por Cliente ---")
            print(f"{'Cliente':<20} | {'Pedidos':<7} | {'Total Gasto':<15}")
            print("-" * 50)
            for name, values in metrics.items():
                total_gasto_str = f"R$ {values['valor_total_gasto']:.2f}"
                print(f"{name:<20} | {values['numero_de_pedidos']:<7} | {total_gasto_str:<15}")
            continue
        
        if user_input.strip().lower() == "/anomalies":
            print("\nðŸ”Ž Analisando mÃ©tricas em busca de anomalias com a IA...")
            
            metrics = metrics_plugin.query_metrics(PEDIDOS_JSON_STR)
            metrics_str = json.dumps(metrics, indent=2, ensure_ascii=False)

            anomaly_prompt = f"""
            VocÃª Ã© um analista de dados sÃªnior especializado em operaÃ§Ãµes de restaurantes.
            Sua tarefa Ã© encontrar anomalias, padrÃµes interessantes ou pontos de risco nos dados de mÃ©tricas a seguir.
            Seja direto e aponte os achados em formato de lista (bullet points).
            Considere correlaÃ§Ãµes entre os dados, como tempo de preparo em dias especÃ­ficos, vendas de produtos em certos meses, etc.
            Se nada parecer fora do comum, apenas responda "Nenhuma anomalia significativa foi detectada.".

            Aqui estÃ£o os dados das mÃ©tricas:
            {metrics_str}
            """

            response = await report_plugin._chat.complete(anomaly_prompt)
            
            print("\n--- AnÃ¡lise de Anomalias da IA ---")
            print(response)
            print("-------------------------------------\n")
            continue

        if user_input.strip().lower() == "/report":
            print("O comando /report estÃ¡ temporariamente desativado.")
            continue

        print("Agente: Comando nÃ£o reconhecido. Use /metrics, /clients_metrics ou /anomalies.")

if __name__ == "__main__":
    try:
        asyncio.run(chat_loop())
    except KeyboardInterrupt:
        print("\nPrograma encerrado pelo usuÃ¡rio.")